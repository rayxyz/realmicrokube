// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	UserReq
	UserResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type User struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,string"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()    {}

type UserReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,string"`
}

func (m *UserReq) Reset()         { *m = UserReq{} }
func (m *UserReq) String() string { return proto1.CompactTextString(m) }
func (*UserReq) ProtoMessage()    {}

type UserResp struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user"`
}

func (m *UserResp) Reset()         { *m = UserResp{} }
func (m *UserResp) String() string { return proto1.CompactTextString(m) }
func (*UserResp) ProtoMessage()    {}

func (m *UserResp) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SdUser service

type SdUserClient interface {
	GetUserInfo(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
}

type sdUserClient struct {
	cc *grpc.ClientConn
}

func NewSdUserClient(cc *grpc.ClientConn) SdUserClient {
	return &sdUserClient{cc}
}

func (c *sdUserClient) GetUserInfo(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := grpc.Invoke(ctx, "/proto.SdUser/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SdUser service

type SdUserServer interface {
	GetUserInfo(context.Context, *UserReq) (*UserResp, error)
}

func RegisterSdUserServer(s *grpc.Server, srv SdUserServer) {
	s.RegisterService(&_SdUser_serviceDesc, srv)
}

func _SdUser_GetUserInfo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UserReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SdUserServer).GetUserInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SdUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SdUser",
	HandlerType: (*SdUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _SdUser_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
